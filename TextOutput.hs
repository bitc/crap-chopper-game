module TextOutput
(
joinGlyphs,
glyphFromChar,
glyphFromString
)
where

type Glyph = [(Double, Double)]

glyphFromString :: Double -> [Char] -> Glyph
glyphFromString spacing s = joinGlyphs spacing (map glyphFromChar s)

joinGlyphs :: Double -> [Glyph] -> Glyph
joinGlyphs spacing [] = []
joinGlyphs spacing (x:xs) = x ++ (transGlyph (1 + spacing) (joinGlyphs spacing xs))
                            where transGlyph :: Double -> Glyph -> Glyph
                                  transGlyph t = map ( \ (x, y) -> (x + t, y) )

glyphFromChar :: Char -> [(Double, Double)]
glyphFromChar c = case c of
  'A' -> [(0, 0), (0, 1),
          (0, 1), (1, 1),
          (1, 1), (1, 0),
          (0, 0.5), (1, 0.5)]
  'B' -> [(0, 0), (0, 1),
          (0, 1), (1, 0.5),
          (1, 0.5), (0, 0),
          (0, 0.5), (1, 0.5)]
  'C' -> [(1, 0), (0, 0),
          (0, 0), (0, 1),
          (0, 1), (1, 1)]
  'D' -> [(0, 0), (0, 1),
          (0, 1), (1, 0.5),
          (1, 0.5), (0, 0)]
  'E' -> [(1, 0), (0, 0),
          (0, 0), (0, 1),
          (0, 1), (1, 1),
          (0, 0.5), (1, 0.5)]
  'F' -> [(0, 0), (0, 1),
          (0, 1), (1, 1),
          (0, 0.5), (1, 0.5)]
  'G' -> [(1, 1), (0, 1),
          (0, 1), (0, 0),
          (0, 0), (1, 0),
          (1, 0), (1, 0.5),
          (1, 0.5), (0.5, 0.5)]
  'H' -> [(0, 0), (0, 1),
          (1, 0), (1, 1),
          (0, 0.5), (1, 0.5)]
  'I' -> [(0.5, 0), (0.5, 1),
          (0, 1), (1, 1),
          (0, 0), (1, 0)]
  'J' -> [(0.5, 0), (0.5, 1),
          (0, 1), (1, 1),
          (0, 0), (0.5, 0),
          (0, 0), (0, 0.5)]
  'K' -> [(0, 0), (0, 1),
          (0, 0.5), (1, 1),
          (0, 0.5), (1, 0)]
  'L' -> [(0, 1), (0, 0),
          (0, 0), (1, 0)]
  'M' -> [(0, 1), (1, 1),
          (0, 1), (0, 0),
          (0.5, 1), (0.5, 0),
          (1, 1), (1, 0)]
  'N' -> [(0, 0), (0, 1),
          (0, 1), (1, 0),
          (1, 0), (1, 1)]
  'O' -> [(0, 0), (0, 1),
          (0, 1), (1, 1),
          (1, 1), (1, 0),
          (1, 0), (0, 0)]
  'P' -> [(0, 0), (0, 1),
          (0, 1), (1, 1),
          (1, 1), (1, 0.5),
          (1, 0.5), (0, 0.5)]
  'Q' -> [(0, 0), (0, 1),
          (0, 1), (1, 1),
          (1, 1), (1, 0),
          (1, 0), (0, 0),
          (0.5, 0), (0.5, 0.5)]
  'R' -> [(0, 0), (0, 1),
          (0, 1), (1, 1),
          (1, 1), (1, 0.5),
          (1, 0.5), (0, 0.5),
          (0, 0.5), (1, 0)]
  'S' -> [(1, 1), (0, 1),
          (0, 1), (0, 0.5),
          (0, 0.5), (1, 0.5),
          (1, 0.5), (1, 0),
          (1, 0), (0, 0)]
  'T' -> [(0.5, 0), (0.5, 1),
          (0, 1), (1, 1)]
  'U' -> [(0, 1), (0, 0),
          (0, 0), (1, 0),
          (1, 0), (1, 1)]
  'V' -> [(0, 1), (0.5, 0),
          (0.5, 0), (1, 1)]
  'W' -> [(0, 0), (1, 0),
          (0, 1), (0, 0),
          (0.5, 1), (0.5, 0),
          (1, 1), (1, 0)]
  'X' -> [(0, 0), (1, 1),
          (0, 1), (1, 0)]
  'Y' -> [(0, 1), (0.5, 0.5),
          (1, 1), (0.5, 0.5),
          (0.5, 0.5), (0.5, 0)]
  'Z' -> [(0, 1), (1, 1),
          (1, 1), (0, 0),
          (0, 0), (1, 0)]
  '0' -> [(0, 0), (0, 1),
          (0, 1), (1, 1),
          (1, 1), (1, 0),
          (1, 0), (0, 0)]
  '1' -> [(1, 1), (1, 0)]
  '2' -> [(0, 1), (1, 1),
          (1, 1), (1, 0.5),
          (1, 0.5), (0, 0.5),
          (0, 0.5), (0, 0),
          (0, 0), (1, 0)]
  '3' -> [(1, 1), (1, 0),
          (0, 1), (1, 1),
          (0, 0.5), (1, 0.5),
          (0, 0), (1, 0)]
  '4' -> [(0, 1), (0, 0.5),
          (0, 0.5), (1, 0.5),
          (1, 0), (1, 1)]
  '5' -> [(1, 1), (0, 1),
          (0, 1), (0, 0.5),
          (0, 0.5), (1, 0.5),
          (1, 0.5), (1, 0),
          (1, 0), (0, 0)]
  '6' -> [(1, 1), (0, 1),
          (0, 1), (0, 0),
          (0, 0), (1, 0),
          (1, 0), (1, 0.5),
          (1, 0.5), (0, 0.5)]
  '7' -> [(0, 1), (1, 1),
          (1, 1), (1, 0)]
  '8' -> [(0, 0), (0, 1),
          (0, 1), (1, 1),
          (1, 1), (1, 0),
          (1, 0), (0, 0),
          (0, 0.5), (1, 0.5)]
  '9' -> [(0, 0), (1, 0),
          (1, 0), (1, 1),
          (1, 1), (0, 1),
          (0, 1), (0, 0.5),
          (0, 0.5), (1, 0.5)]
  ' ' -> []
  '!' -> [(0.5, 1), (0.5, 0.25),
          (0.5, 0.125), (0.5, 0)]
  _ -> [(0, 0.5), (0.5, 0),
        (0.5, 0), (1, 0.5),
        (1, 0.5), (0.5, 1),
        (0.5, 1), (0, 0.5)]

